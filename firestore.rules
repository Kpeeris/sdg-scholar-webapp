// rules_version = '2';

// service cloud.firestore {

//   match /databases/{database}/documents {

// 		// Function to check if someone is authenticated
//   	function isAuthenticated() {
//       return request.auth != null;
//     }
    
//     // // Function to check if someone is an admin or learner, and cache the result
//     // function getUserRole() {
//     //   let isAdmin = exists(/databases/$(database)/documents/admins/$(request.auth.uid));
//     //   let isLearner = exists(/databases/$(database)/documents/learners/$(request.auth.uid));
//     //   return { isAdmin: isAdmin, isLearner: isLearner }; 
//     // }
    
//     function isAdmin() {
//     	return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
//     }
    
//     // Admins collection (only admins can update their own data)
//     match /admins/{adminId} {
//       allow create, read: if isAuthenticated();
//       allow update: if isAdmin();
//     }

//     // Learners collection (only learners can update their own data)
//     match /learners/{learnerId} {
//     	allow create, read: if isAuthenticated();
//       allow update: if request.auth != null && exists(/databases/$(database)/documents/learners/$(request.auth.uid));
//     }
    
//     // Admin Codes, everyone can read this but cannot write
// 		match /config/adminCodes {
//     	allow read: if true; 
//       allow write: if false;
//     }
    
//      // Announcements collection (admins can read/write, learners can only read)
//     match /announcements/{announcementId} {
//       allow read: if isAuthenticated(); 
//       allow write: if isAdmin(); 
//     }
    
//     // Quizzes collection (admins can read/write, learners can only read)
//     match /quizzes/{quizId}/{document=**} {
//       allow read: if isAuthenticated(); 
//       allow write: if isAdmin();
//     }
//   }
// }


// Works but requires a lot of reads and reach firebase quota
// rules_version = '2';

// service cloud.firestore {
	
//   match /databases/{database}/documents {
  	
//     // Function to check if someone is authenticated
//   	function isAuthenticated() {
//       return request.auth != null;
//     }
    
//     // Function to check if someone is an admin or not
//     function isAdmin() {
//       return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
//     }
    
//     // Function to check if someone is a learner or not
//     function isLearner() {
//     	return request.auth != null && exists(/databases/$(database)/documents/learners/$(request.auth.uid));
//     }
    
//     // Admins collection (only admins can update their own data)
//     match /admins/{adminId} {
//       allow create, read: if isAuthenticated();
//       allow update: if isAdmin();
//     }

//     // Learners collection (only learners can update their own data)
//     match /learners/{learnerId} {
//     	allow create, read: if isAuthenticated();
//       allow update: if isLearner();
//     }
    
//     // Admin Codes, everyone can read this but cannot write
//     match /config/adminCodes {
//     	allow read: if true; 
//       allow write: if false;
//     }
    
//      // Announcements collection (admins can read/write, learners can only read)
//     match /announcements/{announcementId} {
//       allow read: if isAdmin() || isLearner(); 
//       allow write: if isAdmin(); 
//     }
    
//     // Quizzes collection (admins can read/write, learners can only read)
//     match /quizzes/{quizId}/{document=**} {
//       allow read: if isAdmin() || isLearner(); 
//       allow write: if isAdmin();
//     }
//   }
// }

// // ORIGINAL
// rules_version = '2';

// service cloud.firestore {
//   match /databases/{database}/documents {

//     // This rule allows anyone with your Firestore database reference to view, edit,
//     // and delete all data in your Firestore database. It is useful for getting
//     // started, but it is configured to expire after 30 days because it
//     // leaves your app open to attackers. At that time, all client
//     // requests to your Firestore database will be denied.
//     //
//     // Make sure to write security rules for your app before that time, or else
//     // all client requests to your Firestore database will be denied until you Update
//     // your rules
    
//     match /{document=**} {
//       allow read, write: if request.time < timestamp.date(2024, 10, 25);
//     }
    
//     match /config/adminCodes {
//     	allow read: if true; // Make sure this is set to allow reads (adjust to your needs)
//     }

//   }
// }



rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    
    match /{document=**} {
      allow read, write: if true;
    }
    
    match /config/adminCodes {
    	allow read: if true; // Make sure this is set to allow reads (adjust to your needs)
    }

  }
}