// import { render, screen, waitFor, fireEvent } from "@testing-library/react";
// import { MemoryRouter } from "react-router-dom";
// //import { afterEach } from "vitest";
// import { it, expect, describe, vi, beforeEach, afterEach } from "vitest";
// import {
//   doc,
//   getDoc,
//   getDocs,
//   collection,
//   updateDoc,
//   query,
//   where,
// } from "firebase/firestore";
// import db from "@/firebaseFiles/firebaseConfig";
// import { useAuthContext } from "@/AuthProvider";

// import Quiz from "../pages/quiz/Quiz";
// import { set } from "react-hook-form";

// // // Mock useAuthContext
// // vi.mock("@/AuthProvider", () => ({
// //   useAuthContext: vi.fn(),
// // }));
// // vi.mock("firebase/firestore", () => ({
// //   //doc: vi.fn(),
// //   getDoc: vi.fn(),
// //   getDocs: vi.fn(),
// //   collection: vi.fn(),
// //   updateDoc: vi.fn(),
// //   query: vi.fn(),
// //   where: vi.fn(),
// // }));

// describe("Quiz Page", () => {
//   beforeEach(async () => {
//     await setDoc(doc(db, "users", "123"), {
//   })

//   it("should render the loading screen initially", async () => {
//     //whether is admin or learner the page should render

//     screen.debug();
//     expect(screen.getByTestId("quiz-page")).toBeInTheDocument();
//   });

//   describe("Learner", () => {
//     beforeEach(() => {
//       useAuthContext.mockReturnValue({
//         user: { uid: "123", email: "test@test.com" },
//         role: "learner",
//       });

//       getDoc.mockReturnValue({
//         exists: true,
//         data: () => ({ score: 0 }),
//       });

//       getDocs.mockReturnValue({
//         empty: true,
//       });
//     });
//     afterEach(() => {
//       vi.clearAllMocks();
//     });
//     it("should render the 'Are you ready?' page for learner", async () => {
//       //whether is admin or learner the page should render
//       render(
//         <MemoryRouter>
//           <Quiz />
//         </MemoryRouter>
//       );
//       screen.debug();
//     });
//   });
//   //if admin should render the quiz with edit content button
//   //if learner should render "are you ready" page then quiz page without edit button
//   //if the user has already taken the quiz, should render the score page
//   // when you click submit on the quiz page, should update the user's quiz scores in the database
//   // when you click submit sould render the correct score with confetti if 100%
// });
